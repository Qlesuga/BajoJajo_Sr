// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    playerLink    UserPlayerLink?
    srStatus      SrStatus?
    playerSettings UserPlayerSettings?
    userSettings UserSongRequestSettings?
    userMusicHistory UserMusicHistory[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model UserPlayerLink{
  id            String    @id @default(cuid())
  userId String @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  link String @default(nanoid()) @unique
}

model SrStatus{
  userID String @id
  user         User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  status Boolean @default(true)
}

model UserPlayerSettings{
  userID String @id
  user         User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  volumeInPercentage Int @default(50)
}

model UserSongRequestSettings {
  userID String @id
  user         User     @relation(fields: [userID], references: [id], onDelete: Cascade)

  maxRequests Int @default(30)
  minSongLength Int @default(15)
  maxSongLength Int @default(600) 
  minSongViews Int @default(1500)
  blockAgeRestrictedSongs Boolean @default(false)
  autoPlayer Boolean @default(true)

  messageAddSongSuccess             String   @default("successfully added \"%song_title\" to queue")
  messageAlreadyInQueue             String   @default("already in queue")
  messageBannedWordInTitle          String   @default("song contains banned word in title")
  messageWrongLength                String   @default("song length must be between %formated_min_length and %formated_max_length")
  messageMinimumViews               String   @default("song must have over %minView views")
  messageVideoAgeRestricted         String   @default("song is age restricted")
  messageInvalidSong                String   @default("invalid song")
  messageMaxQueueLengthReached      String   @default("song queue length can't exceed %max_queue_length songs")

}

model UserMusicHistory{
  id      Int       @id @default(autoincrement())
  userID  String 
  user    User      @relation(fields: [userID], references: [id], onDelete: Cascade)
  songID  String    @unique 
}
